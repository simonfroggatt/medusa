"""
Django settings for medusa project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import environ
from django.contrib import messages
from decouple import config
from storages.backends.s3boto3 import S3Boto3Storage
#from custom_storages import MediaStorage

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)
environ.Env.read_env()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATE_DIR = os.path.join(BASE_DIR,'templates')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0%g862#abjugdfjbz1i3y3oc0)ifrdds-!t_m&-^c(4#!d8y#%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
    'medusa',
    'apps.authentication',
    'apps.products',
    'apps.customer',
    'apps.pricing',
    'apps.options',
    'apps.symbols',
    'apps.category',
    'apps.orders',
    'apps.company',
    'apps.emails',
    'apps.paperwork',
    'apps.quotes',
    'apps.pages',
    'apps.sites',
    'apps.cart',
    'apps.templating',
    'apps.bulk',
    'apps.shipping',
    'apps.suppliers',
    'apps.dashboard',
    'apps.xero_api',
    'rest_framework',
    'crispy_forms',
    'crispy_bootstrap5',
    'rest_framework_datatables',
    'bootstrap_modal_forms',
    'tinymce',
    'storages',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'medusa.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            TEMPLATE_DIR
        ]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'medusa.icon_list.icons_processor',
                'medusa.icon_list.button_colours',
                'medusa.icon_list.js_icons',
                'medusa.icon_list.js_buttons'
            ],
        },
    },
]

WSGI_APPLICATION = 'medusa.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'totalsafetygroup_oc',
        'USER': 'root',
        'PASSWORD': 'Keeba69!',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'GMT'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),
                    #os.path.join(BASE_DIR, 'apps/templating/static/templating'),
                    os.path.join(BASE_DIR, 'apps/authentication/static/authentication'),
                    os.path.join(BASE_DIR, 'apps/bulk/static/bulk'),
                    os.path.join(BASE_DIR, 'apps/category/static/category'),
                    os.path.join(BASE_DIR, 'apps/company/static/company'),
                    os.path.join(BASE_DIR, 'apps/customer/static/customer'),
                    os.path.join(BASE_DIR, 'apps/dashboard/static/dashboard'),
                    os.path.join(BASE_DIR, 'apps/orders/static/orders'),
                    os.path.join(BASE_DIR, 'apps/emails/static/emails'),
                    os.path.join(BASE_DIR, 'apps/options/static/options'),
                    os.path.join(BASE_DIR, 'apps/pages/static/pages'),
                    os.path.join(BASE_DIR, 'apps/paperwork/static/paperwork'),
                    os.path.join(BASE_DIR, 'apps/pricing/static/pricing'),
                    os.path.join(BASE_DIR, 'apps/products/static/products'),
                    os.path.join(BASE_DIR, 'apps/quotes/static/quotes'),
                    os.path.join(BASE_DIR, 'apps/shipping/static/shipping'),
                    os.path.join(BASE_DIR, 'apps/sites/static/sites'),
                    os.path.join(BASE_DIR, 'apps/suppliers/static/suppliers'),
                    os.path.join(BASE_DIR, 'apps/symbols/static/symbols'),
                    os.path.join(BASE_DIR, 'apps/templating/static/templating'),
                    os.path.join(BASE_DIR, 'apps/xero_api/static/xero_api'),
                    ]






# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = 'auth-login'
LOGIN_REDIRECT_URL = 'auth-login'

# LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

SESSION_EXPIRE_SECONDS = 90  # 5 minute
SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True
SESSION_EXPIRE_AFTER_LAST_ACTIVITY_GRACE_PERIOD = 1
SESSION_TIMEOUT_REDIRECT = 'auth-lock-screen'


REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        'rest_framework_datatables.renderers.DatatablesRenderer',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework_datatables.filters.DatatablesFilterBackend',
    ),

    'DATETIME_FORMAT' : "%d/%m/%Y %H:%M:%S",

    'DEFAULT_PAGINATION_CLASS': 'rest_framework_datatables.pagination.DatatablesPageNumberPagination',

    'PAGE_SIZE': 1000,

    'UPLOADED_FILES_USE_URL': False
}




CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"



TINYMCE_DEFAULT_CONFIG = {
    "menubar": "false",
    "plugins": 'lists, link, image, media, preview',
    "toolbar": 'h1 h2 bold italic | strikethrough Superscript Subscript | bullist numlist fontsizeselect removeformat ',
}
TINYMCE_COMPRESSOR = False

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

TOAST_TAGS = {
    'INFO': 'bg-info',
    'SUCCESS': 'bg-success',
    'WARNING': 'bg-warning',
    'ERROR': 'bg-danger',
}

#TSG - constants
TSG_PAYMENT_TYPES = {
    'Proforma': 7,
    'PO': 5
}

TSG_PRODUCT_STATUS_SHIPPING = [8, 9]
TSG_ORDER_STATUS_PROCESSED = 3
TSG_PAYMENT_STATUS_PAID = 2

# settings.py
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'sales@safetysignsandnotices.co.uk' # Replace with your Google Workspace email address
EMAIL_HOST_PASSWORD = '$me11yb0nes' # Replace with your Google Workspace email password

#XERO API
XERO_CLIENT_ID = 'CF09696A2AA3439A8C196E0951704336'
XERO_CLIENT_SECRET = 'yblgaWg93p_kMZKCrztUT5T4gn2sbG4megdNqlz0gVSvds-t'
XERO_TOKEN_FERNET = b'Z4mVj1JlAM5CxyKfHbvs0f8q9X4wsBqHZUD6FdmsHDk='





#AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'




# Static and media file configuration
#STATIC_URL = f'{AWS_S3_URL_PROTOCOL}://{AWS_S3_CUSTOM_DOMAIN}/static/'
#STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

CDN = True

# For serving static files directly from S3
AWS_S3_URL_PROTOCOL = 'https'
AWS_S3_USE_SSL = True
AWS_S3_VERIFY = True
AWS_ACCESS_KEY_ID = 'AKIATG6MGICYXOUN5GKE'
AWS_SECRET_ACCESS_KEY = '9dd89wllEJCFlqyodi5dvn2KzgOvepRLfVbgYaBP'
AWS_S3_REGION_NAME = 'eu-west-2'  # e.g., us-east-1
AWS_STORAGE_BUCKET_NAME = 'amzn-s3-totalsafetygroup-bucket-v1'
AWS_S3_CUSTOM_DOMAIN = f'cdn.totalsafetygroup.com'
USE_S3_MEDIA = True
AWS_LOCATION = ''




#always server our statics from local
STATIC_ROOT = os.path.join(BASE_DIR, 'assets')
STATIC_URL = '/static/'

MEDIAFILES_LOCATION = ''


if CDN:
    #MEDIA_URL = f'{AWS_S3_URL_PROTOCOL}://{AWS_S3_CUSTOM_DOMAIN}/'
     STORAGES = {
    #     "old": {
    #         "BACKEND": "django.core.files.storage.FileSystemStorage",
    #     },
         "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
            },
         "default": {
             "BACKEND": "storages.backends.s3boto3.S3StaticStorage",
    #         #"BACKEND": "custom_storages.MediaStorage",
             "LOCATION": "/",
             "DEFAULT_ACL": "public-read",
             "AWS_S3_REGION_NAME": AWS_S3_REGION_NAME,
             "AWS_ACCESS_KEY_ID": AWS_ACCESS_KEY_ID,
             "AWS_SECRET_ACCESS_KEY": AWS_SECRET_ACCESS_KEY,
             "AWS_STORAGE_BUCKET_NAME": AWS_STORAGE_BUCKET_NAME,
             "AWS_S3_CUSTOM_DOMAIN": AWS_S3_CUSTOM_DOMAIN,
             "AWS_S3_FILE_OVERWRITE": False,
             "AWS_DEFAULT_ACL": None,
             "AWS_S3_OBJECT_PARAMETERS": {
                 "CacheControl": "max-age=86400",
             },
             "AWS_QUERYSTRING_AUTH": False,
             "AWS_S3_VERIFY": AWS_S3_VERIFY,
             "AWS_S3_USE_SSL": AWS_S3_USE_SSL,

         },

     }
     MEDIA_URL = f'{AWS_S3_URL_PROTOCOL}://{AWS_S3_CUSTOM_DOMAIN}/'
     MEDIA_DIRECTORY = 'media'
   # DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
   # MEDIAFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
else:
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join('/Users/simonfroggatt/Sites/tsg_storage')


#DEFAULT_FILE_STORAGE = 'custom_storages.MediaStorage'

TSG_MEDIA_ROOT = ''

#custom paths for files
WEBSITE_ROOT = os.path.join(TSG_MEDIA_ROOT, 'stores')
MEDUSA_ROOT = os.path.join(TSG_MEDIA_ROOT, 'medusa')

MEDUSA_DOCS = os.path.join(TSG_MEDIA_ROOT, 'medusa/documents')
MEDUSA_ARTWORK = os.path.join(TSG_MEDIA_ROOT, 'medusa/artwork')

WEBSITE_CATEGORY = os.path.join(WEBSITE_ROOT, '/category')
WEBSITE_PRODUCTS = os.path.join(WEBSITE_ROOT, '/products')
WEBSITE_SYMBOL_SVG = os.path.join(WEBSITE_ROOT, '/symbols/svg')

THUMBNAIL_CACHE_ROOT = 'medusa/preview_cache'
THUMBNAIL_CACHE = os.path.join(TSG_MEDIA_ROOT, THUMBNAIL_CACHE_ROOT)

REPORT_PATH = os.path.join(BASE_DIR, "static/reports")
REPORT_URL = 'http://127.0.0.1:8000'

TINYMCE_JS_URL = os.path.join(STATIC_URL, "libs/tinymce/tinymce.min.js")



